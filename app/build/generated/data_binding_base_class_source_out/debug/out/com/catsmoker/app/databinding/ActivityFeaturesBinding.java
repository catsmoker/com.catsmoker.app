// Generated by view binder compiler. Do not edit!
package com.catsmoker.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.catsmoker.app.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFeaturesBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnApplyDns;

  @NonNull
  public final Button btnCleanCache;

  @NonNull
  public final Button btnCleanRam;

  @NonNull
  public final Button btnOpenGameLauncher;

  @NonNull
  public final MaterialButton btnToggleCrosshair;

  @NonNull
  public final MaterialCardView cardScope1;

  @NonNull
  public final MaterialCardView cardScope2;

  @NonNull
  public final MaterialCardView cardScope3;

  @NonNull
  public final MaterialCardView cardScope4;

  @NonNull
  public final MaterialCardView crosshairCard;

  @NonNull
  public final Spinner dnsSpinner;

  @NonNull
  public final TextView featuresHeaderTitle;

  @NonNull
  public final TextView featuresTitle;

  @NonNull
  public final TextView memoryStatusText;

  @NonNull
  public final ImageView scope1;

  @NonNull
  public final ImageView scope2;

  @NonNull
  public final ImageView scope3;

  @NonNull
  public final ImageView scope4;

  @NonNull
  public final LinearLayout scopeImageContainer;

  @NonNull
  public final HorizontalScrollView scopeScrollView;

  private ActivityFeaturesBinding(@NonNull ScrollView rootView, @NonNull Button btnApplyDns,
      @NonNull Button btnCleanCache, @NonNull Button btnCleanRam,
      @NonNull Button btnOpenGameLauncher, @NonNull MaterialButton btnToggleCrosshair,
      @NonNull MaterialCardView cardScope1, @NonNull MaterialCardView cardScope2,
      @NonNull MaterialCardView cardScope3, @NonNull MaterialCardView cardScope4,
      @NonNull MaterialCardView crosshairCard, @NonNull Spinner dnsSpinner,
      @NonNull TextView featuresHeaderTitle, @NonNull TextView featuresTitle,
      @NonNull TextView memoryStatusText, @NonNull ImageView scope1, @NonNull ImageView scope2,
      @NonNull ImageView scope3, @NonNull ImageView scope4,
      @NonNull LinearLayout scopeImageContainer, @NonNull HorizontalScrollView scopeScrollView) {
    this.rootView = rootView;
    this.btnApplyDns = btnApplyDns;
    this.btnCleanCache = btnCleanCache;
    this.btnCleanRam = btnCleanRam;
    this.btnOpenGameLauncher = btnOpenGameLauncher;
    this.btnToggleCrosshair = btnToggleCrosshair;
    this.cardScope1 = cardScope1;
    this.cardScope2 = cardScope2;
    this.cardScope3 = cardScope3;
    this.cardScope4 = cardScope4;
    this.crosshairCard = crosshairCard;
    this.dnsSpinner = dnsSpinner;
    this.featuresHeaderTitle = featuresHeaderTitle;
    this.featuresTitle = featuresTitle;
    this.memoryStatusText = memoryStatusText;
    this.scope1 = scope1;
    this.scope2 = scope2;
    this.scope3 = scope3;
    this.scope4 = scope4;
    this.scopeImageContainer = scopeImageContainer;
    this.scopeScrollView = scopeScrollView;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFeaturesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFeaturesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_features, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFeaturesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_apply_dns;
      Button btnApplyDns = ViewBindings.findChildViewById(rootView, id);
      if (btnApplyDns == null) {
        break missingId;
      }

      id = R.id.btn_clean_cache;
      Button btnCleanCache = ViewBindings.findChildViewById(rootView, id);
      if (btnCleanCache == null) {
        break missingId;
      }

      id = R.id.btn_clean_ram;
      Button btnCleanRam = ViewBindings.findChildViewById(rootView, id);
      if (btnCleanRam == null) {
        break missingId;
      }

      id = R.id.btn_open_game_launcher;
      Button btnOpenGameLauncher = ViewBindings.findChildViewById(rootView, id);
      if (btnOpenGameLauncher == null) {
        break missingId;
      }

      id = R.id.btn_toggle_crosshair;
      MaterialButton btnToggleCrosshair = ViewBindings.findChildViewById(rootView, id);
      if (btnToggleCrosshair == null) {
        break missingId;
      }

      id = R.id.card_scope1;
      MaterialCardView cardScope1 = ViewBindings.findChildViewById(rootView, id);
      if (cardScope1 == null) {
        break missingId;
      }

      id = R.id.card_scope2;
      MaterialCardView cardScope2 = ViewBindings.findChildViewById(rootView, id);
      if (cardScope2 == null) {
        break missingId;
      }

      id = R.id.card_scope3;
      MaterialCardView cardScope3 = ViewBindings.findChildViewById(rootView, id);
      if (cardScope3 == null) {
        break missingId;
      }

      id = R.id.card_scope4;
      MaterialCardView cardScope4 = ViewBindings.findChildViewById(rootView, id);
      if (cardScope4 == null) {
        break missingId;
      }

      id = R.id.crosshair_card;
      MaterialCardView crosshairCard = ViewBindings.findChildViewById(rootView, id);
      if (crosshairCard == null) {
        break missingId;
      }

      id = R.id.dns_spinner;
      Spinner dnsSpinner = ViewBindings.findChildViewById(rootView, id);
      if (dnsSpinner == null) {
        break missingId;
      }

      id = R.id.features_header_title;
      TextView featuresHeaderTitle = ViewBindings.findChildViewById(rootView, id);
      if (featuresHeaderTitle == null) {
        break missingId;
      }

      id = R.id.features_title;
      TextView featuresTitle = ViewBindings.findChildViewById(rootView, id);
      if (featuresTitle == null) {
        break missingId;
      }

      id = R.id.memory_status_text;
      TextView memoryStatusText = ViewBindings.findChildViewById(rootView, id);
      if (memoryStatusText == null) {
        break missingId;
      }

      id = R.id.scope1;
      ImageView scope1 = ViewBindings.findChildViewById(rootView, id);
      if (scope1 == null) {
        break missingId;
      }

      id = R.id.scope2;
      ImageView scope2 = ViewBindings.findChildViewById(rootView, id);
      if (scope2 == null) {
        break missingId;
      }

      id = R.id.scope3;
      ImageView scope3 = ViewBindings.findChildViewById(rootView, id);
      if (scope3 == null) {
        break missingId;
      }

      id = R.id.scope4;
      ImageView scope4 = ViewBindings.findChildViewById(rootView, id);
      if (scope4 == null) {
        break missingId;
      }

      id = R.id.scope_image_container;
      LinearLayout scopeImageContainer = ViewBindings.findChildViewById(rootView, id);
      if (scopeImageContainer == null) {
        break missingId;
      }

      id = R.id.scope_scroll_view;
      HorizontalScrollView scopeScrollView = ViewBindings.findChildViewById(rootView, id);
      if (scopeScrollView == null) {
        break missingId;
      }

      return new ActivityFeaturesBinding((ScrollView) rootView, btnApplyDns, btnCleanCache,
          btnCleanRam, btnOpenGameLauncher, btnToggleCrosshair, cardScope1, cardScope2, cardScope3,
          cardScope4, crosshairCard, dnsSpinner, featuresHeaderTitle, featuresTitle,
          memoryStatusText, scope1, scope2, scope3, scope4, scopeImageContainer, scopeScrollView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
